#key learning points
*******************************************
1.(Review) Sorted subsequence of size 3
  --approach 1
    -brute force i.e. we are using 3 for loops 1st loop for 1 element 2 loop for 2nd greater element and 3rd loop for greater element .
    -t.c. o(n^3) s.c. o(1)
  --approach 2
    -uing property a[i]<a[j]<a[k] mean for current element j there exit one smaller elemen index i on left side and one greater element index j which is right side.
    -t.c. o(n^2) s.c. o(1)
  --approach 3
    -a little bit optimzation of approach 2
    -we are creating smaller[n] and largest[n] to keep track of largest and smaller element.
    -and finally we are checking that for current element value present in smaller as well largest array.
    -t.c o(n) s.c. o(1)
    -int* smaller=new int[n] <-- creating array with pointer
    -delete[] smaller <-- for deleting the smaller array.

  
  --approach 4
    -idea is first we find elements arr[i] & arr[j] such that arr[i]<arr[j]. then find a third element arr[k] greater than arr[j]
    -t.c. o(n) s.c. o(1)

******************************************************************
2. find duplicates in an array

 --approach 1
   -basic idea is to use a hash map to solve the problem.
   -here is trick if numbers in the array are from 0 to n-1 and the input array has length n. so input array can be used as hash map.
   -t.c. o(n) s.c. o(1)

******************************************************************
3. (Review) mountain subarray problem

  --approach 1
   - basic idea is to use the property of the mountain i.e. a1<=a2<=a3....<=ak>=a(k+1).....>=an
   - so we use first increasing while loop then decrease while loop.
   - if the pointer point to end then answer is true.

  --****approach 2
   - thid approach take 3 hour to understand so it's amazing one
   - basic idea is to make constant time operation for each queary
   - so we are making two extra spaces of length same as original array.
   - left space contain last index on the left side(i.e. we have to use right range here) to calculate the first increasing element.
   - right space contain first index on the right so (i.e. we have to use left range for calculation of first decreasment )           




